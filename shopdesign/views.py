from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth import logout
from django.urls import reverse
from django.conf import settings
from django.http import JsonResponse
from django.contrib import messages
from .models import Product, Order, OrderItem
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login
import matplotlib.pyplot as plt
from collections import Counter
from django.shortcuts import render
from .models import Order, OrderItem, Product
import io
import urllib, base64

@login_required
def home(request):
    """ ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ Home - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÉ‡∏´‡πâ Redirect ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /admin-dashboard/ """
    if request.user.is_staff:
        return redirect(reverse("admin_dashboard"))

    query = request.GET.get("search")
    products = Product.objects.filter(name__icontains=query) if query else Product.objects.all()
    return render(request, "home.html", {"products": products, "search_query": query})

def auth_view(request):
    """ ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å """
    if request.method == "POST":
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # ‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            return redirect("home")  # ‚úÖ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    else:
        form = UserCreationForm()
    
    return render(request, "registration/signup.html", {"form": form})

@login_required 
def user_logout(request):
    """ ‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö """
    logout(request)
    return redirect(settings.LOGOUT_REDIRECT_URL)

@login_required
def add_to_cart(request, product_id):
    """ ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏•‡∏î stock """
    if request.method == "POST":
        product = get_object_or_404(Product, id=product_id)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÉ‡∏ô stock ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if product.stock <= 0:
            return JsonResponse({"success": False, "error": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î"}, status=400)

        order, created = Order.objects.get_or_create(user=request.user, is_completed=False)
        order_item, created = OrderItem.objects.get_or_create(order=order, product=product)

        if not created:
            order_item.quantity += 1
            order_item.save()

        # ‚úÖ ‡∏•‡∏î stock ‡∏•‡∏á 1 ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        product.stock -= 1
        product.save()

        return JsonResponse({"success": True, "new_stock": product.stock})

    return JsonResponse({"success": False}, status=400)

@login_required
def cart_view(request):
    """ ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ """
    order = Order.objects.filter(user=request.user, is_completed=False).first()
    items = order.items.all() if order else []
    total_price = sum(item.product.price * item.quantity for item in items) if items else 0

    return render(request, "cart.html", {"items": items, "total_price": total_price})

@login_required
def remove_from_cart(request, item_id):
    """ ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô stock """
    if request.method == "POST":
        item = get_object_or_404(OrderItem, id=item_id, order__user=request.user)
        order = item.order
        product = item.product  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

        # ‚úÖ ‡∏Ñ‡∏∑‡∏ô stock ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        product.stock += item.quantity
        product.save()

        # ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        item.delete()

        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        total_price = sum(i.product.price * i.quantity for i in order.items.all())

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏•‡∏ö Order ‡∏ó‡∏¥‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 0
        if not order.items.exists():
            order.delete()
            total_price = 0  

        return JsonResponse({"success": True, "total_price": total_price, "new_stock": product.stock})  

    return JsonResponse({"success": False}, status=400)

@login_required
def cart_count(request):
    """ ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ """
    order = Order.objects.filter(user=request.user, is_completed=False).first()
    count = order.items.count() if order else 0
    return JsonResponse({"count": count})

@login_required
def checkout(request):
    """ ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô """
    order = Order.objects.filter(user=request.user, is_completed=False).first()

    if not order or not order.items.exists():
        messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤!")
        return redirect(reverse("cart_view"))

    cart_items = order.items.all()
    total_price = sum(item.product.price * item.quantity for item in cart_items)
    return render(request, "checkout.html", {"cart_items": cart_items, "total_price": total_price})

@login_required
def process_order(request):
    """ ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ ‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ """
    if request.method == "POST":
        order = get_object_or_404(Order, user=request.user, is_completed=False)

        if not order.items.exists():
            messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤!")
            return redirect(reverse("cart_view"))

        payment_slip = request.FILES.get("payment_slip")
        if not payment_slip:
            messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô!")
            return redirect(reverse("checkout"))

        order.payment_slip = payment_slip
        order.status = "waiting_payment"
        order.is_completed = True
        order.save()

        messages.success(request, "üì§ ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        Order.objects.create(user=request.user, is_completed=False)

        return redirect(reverse("payment_status"))

    return redirect(reverse("home"))

@login_required
def payment_status(request):
    """ ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ """
    orders = Order.objects.filter(user=request.user).order_by("-created_at")
    return render(request, "payment_status.html", {"orders": orders})

# ‚úÖ Admin ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
@login_required
@user_passes_test(lambda u: u.is_staff)  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô User ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
def admin_check_orders(request):
    """ ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö """
    orders = Order.objects.filter(status="waiting_payment")
    return render(request, "admin_check_orders.html", {"orders": orders})

@login_required
@user_passes_test(lambda u: u.is_staff)  # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô User ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
def update_order_status(request, order_id, action):
    """ ‚úÖ Admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏•‡∏¥‡∏õ """
    order = get_object_or_404(Order, id=order_id)

    if request.user == order.user:
        messages.error(request, "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ!")
        return redirect(reverse("admin_check_orders"))

    if not order.payment_slip:
        messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ!")
        return redirect(reverse("admin_check_orders"))

    if action == "approve":
        order.status = "completed"
        messages.success(request, f"‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!")
    elif action == "reject":
        order.status = "rejected"
        messages.error(request, f"‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò!")

    order.save()
    return redirect(reverse("admin_check_orders"))

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ plot ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def plot_all_graphs(request):
    # 1. ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
    completed_orders = Order.objects.filter(status='completed')
    order_dates = [order.created_at.date() for order in completed_orders]
    order_counts = Counter(order_dates)
    dates = list(order_counts.keys())
    counts = list(order_counts.values())
    fig1, ax1 = plt.subplots(figsize=(10, 6))
    ax1.bar(dates, counts, color='blue')
    ax1.set_xlabel('Date')
    ax1.set_ylabel('Number of Completed Orders')
    ax1.set_title('Completed Orders by Date')
    buffer1 = io.BytesIO()
    plt.savefig(buffer1, format='png')
    buffer1.seek(0)
    image_data1 = buffer1.getvalue()
    graph_url1 = base64.b64encode(image_data1).decode('utf-8')

    # 2. ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    product_sales = {}
    for order in completed_orders:
        for item in order.items.all():
            product = item.product
            total_price = item.quantity * product.price
            if product in product_sales:
                product_sales[product] += total_price
            else:
                product_sales[product] = total_price
    products = list(product_sales.keys())
    sales = list(product_sales.values())
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    ax2.barh(products, sales, color='green')
    ax2.set_xlabel('Total Sales (Baht)')
    ax2.set_ylabel('Product')
    ax2.set_title('Top Selling Products')
    buffer2 = io.BytesIO()
    plt.savefig(buffer2, format='png')
    buffer2.seek(0)
    image_data2 = buffer2.getvalue()
    graph_url2 = base64.b64encode(image_data2).decode('utf-8')

    # 3. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    status_counts = Counter(order.status for order in completed_orders)
    statuses = list(status_counts.keys())
    counts_status = list(status_counts.values())
    fig3, ax3 = plt.subplots(figsize=(10, 6))
    ax3.bar(statuses, counts_status, color='purple')
    ax3.set_xlabel('Order Status')
    ax3.set_ylabel('Number of Orders')
    ax3.set_title('Orders by Status')
    buffer3 = io.BytesIO()
    plt.savefig(buffer3, format='png')
    buffer3.seek(0)
    image_data3 = buffer3.getvalue()
    graph_url3 = base64.b64encode(image_data3).decode('utf-8')

    # 4. ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    product_sales = {}
    for order in completed_orders:
        for item in order.items.all():
            product = item.product
            total_price = item.quantity * product.price
            if product in product_sales:
                product_sales[product] += total_price
            else:
                product_sales[product] = total_price
    products = list(product_sales.keys())
    sales = list(product_sales.values())
    fig4, ax4 = plt.subplots(figsize=(10, 6))
    ax4.barh(products, sales, color='orange')
    ax4.set_xlabel('Total Sales (Baht)')
    ax4.set_ylabel('Product')
    ax4.set_title('Sales by Product')
    buffer4 = io.BytesIO()
    plt.savefig(buffer4, format='png')
    buffer4.seek(0)
    image_data4 = buffer4.getvalue()
    graph_url4 = base64.b64encode(image_data4).decode('utf-8')

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà template
    return render(request, 'all_graphs.html', {
        'graph_url1': graph_url1,
        'graph_url2': graph_url2,
        'graph_url3': graph_url3,
        'graph_url4': graph_url4,
    })
